rm(list(l,l1,l2))
rm(list= list(l,l1,l2))
list(c(l,l1,l2))
rm(list= list(c(l,l1,l2)))
list(c(l,l1,l2))
rm(list= list(c(l,l1,l2)))
?rm
rm(list= list(c("l","l1","l2")))
rm(list(c("l","l1","l2")))
list("l","l1","l2")
rm(list("l","l1","l2"))
rm(list(l="l",l1="l1",l2="l2"))
rm(c(l="l",l1="l1",l2="l2"))
rm(c(l="l",l1="l1",l2="l2"))
rm(c("l","l1","l2"))
c("l","l1","l2")
rm(list = c("l","l1","l2"))
l <- list()
l1<-AddItemToList(1,l,"a")
l2<-AddItemToList(1,l1,"b")
list
list
list[[1]]
rm(list = c("l","l1","l2"))
rm(list = c("l","l1"))
l <- list()
l
l1<-AddItemToList(1,l,"a")
l2<-AddItemToList(1,l1,"b")
l2<-AddItemToList(1,l1,"b")
AddItemToList <- function(item,list,name)
{
names(list) <-c(names(list), name)
list[[length(list) + 1]] <- item
list
}
debug(AddItemToList)
l2<-AddItemToList(1,l1,"b")
l2<-AddItemToList(1,l1,"b")
l2<-AddItemToList(1,l1,"b")
l2<-AddItemToList(1,l1,"b")
AddItemToList <- function(item,list,name)
{
newnames <-c(names(list), name)
list[[length(list) + 1]] <- item
names(list) <- newnames
list
}
debug(AddItemToList)
l2<-AddItemToList(1,l1,"b")
l3<-AddItemToList(1,l2,"c")
debugonce(AddItemToList)
l1<-AddItemToList(1,l,"a")
n
l1<-AddItemToList(1,l,"a")
l2<-AddItemToList(1,l1,"b")
undebug(AddItemToList)
l1<-AddItemToList(1,l,"a")
l2<-AddItemToList(1,l1,"b")
l3<-AddItemToList(1,l2,"c")
l<-AddItemToList(1,l,"a")
l2<-AddItemToList(1,l1,"b")
l3<-AddItemToList(1,l2,"c")
l<-AddItemToList(1,l,"a")
l<-AddItemToList(1,l,"a")
AddItemToList(dest_colum,dest_colums,dest_colum)
AddItemToList("VMail_Plan",dest_colums,"VMail_Plan")
dest_colums
AddItemToList(dest_colum,dest_colums,dest_colum)
dest_colums<-AddItemToList(dest_colum,dest_colums,dest_colum)
dest_colums<-AddItemToList("VMail_Plan",dest_colums,"VMail_Plan")
rm("dest_colums")
dest_colums<-list()
dest_colums<-AddItemToList(dest_colum,dest_colums,dest_colum)
dest_colums<-AddItemToList("VMail_Plan",dest_colums,"VMail_Plan")
dest_colums
cata_data <- data.frame(dataset[,c(dest_colum,"VMail_Plan")])
names(cata_data)<-names(dest_colums)
View(cata_data)
cata_data <- data.frame(dataset[,names(dest_colums)])
names(cata_data)<-names(dest_colums)
cata_data$aa <- dataset[,1]
View(cata_data)
cleanDataWithCatagories(cata_data,dest_colums)
cleanDataWithCatagories <-  function(data, categories) {
#calculate length
len_c <- length(categories)
tmpData<-NULL
for(i in categories) {
if(tmpData == NULL) {
tmpData<-cleanSingleCatgry(data,i)
} else {
tmpData<-cleanSingleCatgry(tmpData,i)
}
}
tmpData
}
cleanDataWithCatagories(cata_data,dest_colums)
cleanDataWithCatagories <-  function(data, categories) {
#calculate length
len_c <- length(categories)
tmpData<-NULL
for(i in categories) {
if(is.null(tmpData)) {
tmpData<-cleanSingleCatgry(data,i)
} else {
tmpData<-cleanSingleCatgry(tmpData,i)
}
}
tmpData
}
cleanDataWithCatagories(cata_data,dest_colums)
n
n
unbug(cleanSingleCatgry)
undebug(cleanSingleCatgry)
debug(cleanDataWithCatagories)
cleanDataWithCatagories(cata_data,dest_colums)
View(tmpData)
##----clean single category
cleanSingleCatgry<-function(data, category) {
dest_data<-data[,category]
cate_values<-unique(dest_data)
cate_len<-length(cate_values)
for(i in 1:cate_len) {
new_cat_name<-paste(category, i, seq ="")
new_cat_name_values<-new_cat_name
assign(new_cat_name_values, ifelse(data[,category] == cate_values[i],1,0))
data[,new_cat_name] <- get(new_cat_name_values)
i<-i+1
}
#remove orign one
data[,category] <- NULL
data
}
cleanDataWithCatagories(cata_data,dest_colums)
View(tmpData)
undebug(cleanDataWithCatagories)
newcolumn<-vector()
newcolumn<-vector()
newcolumn
normalizeColumn<-function(column,min,max) {
newcolumn<-NULL
for(i in 1:length(column)) {
if(is.null(newcolumn)) {
newcolumn <- normalize(column[i],min,max)
} else {
newcolumn <- c(newcolumn, normalize(column[i],min,max))
}
}
newcolumn
}
normalize<-function(x,min,max) {
return ((x-min)/(max-min))
}
x<-seq(1:10)
normalizeColumn(x,1,10)
#Remove NA average value
cleanNA <- function(column,val=mean(column)) {
column[is.na(column)] <- val
column
}
x<-c(1,10,NA,20,30)
cleanNA(x)
x<-c(1,10,NA,20,30)
cleanNA(x)
debug(cleanNA)
cleanNA(x)
is.na(column)
cleanNA <- function(column,val=mean(column)) {
column[is.na(column)] <- val
column
}
x<-c(1,10,NA,20,30)
debug(cleanNA)
cleanNA(x)
cleanNA <- function(column,val=NULL) {
if(is.null(val)) {
val = mean(column)
}
column[is.na(column)] <- val
column
}
debug(cleanNA)
cleanNA(x)
column
mean(column,ra=TRUE)
mean(column,ra=TRUE)
?mean
mean(column,rm=TRUE)
mean(column,na.rm=TRUE)
cleanNA <- function(column,val=mean(column,na.rm=TRUE)) {
if(is.null(val)) {
val = mean(column)
}
column[is.na(column)] <- val
column
}
x<-c(1,10,NA,20,30)
debug(cleanNA)
cleanNA(x)
cleanNA <- function(column,val=mean(column,na.rm=TRUE)) {
column[is.na(column)] <- val
column
}
undebug(cleanNA)
cleanNA(x)
tempdir()
shiny::runApp('D:/GIT/shiny_example/example/016-knitr-pdf')
shiny::runApp('D:/GIT/shiny_example/shiny_chat')
shiny::runApp('D:/GIT/shiny_example/shiny_chat')
vars
vars$chat
shiny::runApp('D:/GIT/shiny_example/example/021-selectize-plot')
install.packages("map")
library(maps)
?install.packages
install.packages("maps",repos="D:\\r\\maps_2.3-9.zip")
install.packages("maps",lib="D:\\r",repos="D:\\r\\maps_2.3-9.zip")
install.packages("maps1",lib="D:\\r",repos="D:\\r\\maps_2.3-9.zip")
install.packages("maps",lib="D:\\r",repos="D:\\r\\maps_2.3-9 .zip")
library(maps)
shiny::runApp('D:/GIT/shiny_example/example/021-selectize-plot')
shiny::runApp('D:/GIT/shiny_example/example/021-selectize-plot')
shiny::runApp('D:/GIT/shiny_example/example/021-selectize-plot')
shiny::runApp('D:/GIT/shiny_example/example/021-selectize-plot')
shiny::runApp('D:/GIT/shiny_example/example/021-selectize-plot')
USArrests
shiny::runApp('D:/GIT/shiny_example/example/030-basic-datatable')
shiny::runApp('D:/GIT/shiny_example/example/030-basic-datatable')
shiny::runApp('D:/Project/R/CS513/Shiny/basic-1')
shiny::runApp('D:/Project/R/CS513/Shiny/basic-1')
vars$RESULT_ECG_KNN
shiny::runApp('D:/Project/R/CS513/Shiny/basic-1')
shiny::runApp('D:/Project/R/CS513/Shiny/basic-1')
shiny::runApp('D:/Project/R/CS513/Shiny/basic-1')
RESULT_ECG_KNN
shiny::runApp('D:/Project/R/CS513/Shiny/basic-1')
RESULT_ECG_KNN
shiny::runApp('D:/Project/R/CS513/Shiny/basic-1')
RESULT_PLOT
shiny::runApp('D:/Project/R/CS513/Shiny/basic-1')
RESULT_PLOT
re
plot(re, xaxt="n")
RESULT_PLOT
?plot
shiny::runApp('D:/Project/R/CS513/Shiny/basic-1')
RESULT_PLOT
shiny::runApp('D:/Project/R/CS513/Shiny/basic-1')
RESULT_ECG_KNN
shiny::runApp('D:/Project/R/CS513/Shiny/basic-1')
shiny::runApp('D:/Project/R/CS513/Shiny/basic-1')
RESULT_PLOT
RESULT_PLOT
shiny::runApp('D:/Project/R/CS513/Shiny/basic-1')
shiny::runApp('D:/Project/R/CS513/Shiny/basic-1')
RESULT_ECG_KNN
session
RESULT_ECG_KNN
RESULT_ECG_KNN
RESULT_ECG_KNN
RESULT_ECG_KNN
RESULT_ECG_KNN
shiny::runApp('D:/Project/R/CS513/Shiny/basic-1')
shiny::runApp('D:/Project/R/CS513/Shiny/basic-1')
DATASET
re
RESULT_PLOT<-plot(re, xaxt="n")
RESULT_PLOT
shiny::runApp('D:/Project/R/CS513/Shiny/basic-1')
RESULT_PLOT<-
RE_ECG
RE_ECG
shiny::runApp('D:/Project/R/CS513/Shiny/basic-1')
RE_ECG
RE_ECG
envir
envir
RE_ECG
RE_ECG
shiny::runApp('D:/Project/R/CS513/Shiny/basic-1')
vars
shiny::runApp('D:/Project/R/CS513/Shiny/basic-1')
shiny::runApp('D:/Project/R/CS513/Shiny/basic-1')
plot(max_heart_rate, age, col = Predict_clus$cluster)
points(Predict_clus$centers,col = 1:3, pch = 17, cex = 2)
##### FINAL PROJECT #####
### CLASSIFICATION OF CARDIOVASCULAR DISEASE FOR CLEAVELAND MEDICAL DATA ###
### DONE BY:               ###
###          Ram Kharawala ###
###          Mohit Bhasin  ###
###          Danny Diaz    ###
###          Wen Zhang     ###
rm(list=ls())
############################################
### Defining the normalization function  ###
############################################
norm <-function(x,minx,maxx) #Normalization
{
z<-((x-minx)/(maxx-minx))
return(z)
}
###########################################
### Reading the Heart Disorder Dataset  ###
###########################################
Dataset <- read.csv("heart-c.csv") #Loading csv file
View(Dataset)
###################################################
### Creating New Datasets:                      ###
### 1: For classification based on ECG          ###
### 2: Classification based on heart narrowing  ###
###################################################
#>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
# Boolean values for Gender  >>>
# Female=1 Male=0            >>>
#>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
gender_female <- ifelse(Dataset$gender=='female',1,0)
#>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
# Numeric values for CHEST PAIN TYPE                                    >>>
# TYPICAL ANGINA=1 ATYPICAL ANGINA=2 ASYMPTOMATIC=3 NON-ANGINAL PAIN=0  >>>
#>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
cpt_num <- ifelse(Dataset$chestpaintype=='typ_angina',1,
ifelse(Dataset$chestpaintype=='atyp_angina',2,
ifelse(Dataset$chestpaintype=='asympt',3,0)))
#>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
# Numeric values for FASTING BLOOD SUGAR  >>>
# >120=1 <120=0                           >>>
#>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
fbs_num <- ifelse(Dataset$fasting_bloodsugar=='t',1,0)
#>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
# Numeric values for EXERCISE INDUCED ANGINA  >>>
# Yes=1 No=0                                  >>>
#>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
exia_num <- ifelse(Dataset$exercise_induced_ang=='yes',1,0)
#>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
# Numeric values for HEART STATUS (DIAMETER NARROWING)  >>>
# >50%=1 <50%=0                                         >>>
#>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
diam_num <- ifelse(Dataset$diam_narrowing=='>50_1',1,0)
#>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
# Replacing 'NA' values with their mean for Flourosopy  >>>
#>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
nm <- na.omit(Dataset$vessel_color_flourosopy)
Dataset$vessel_color_flourosopy <- ifelse(is.na(Dataset$vessel_color_flourosopy)==TRUE,
mean(nm),Dataset$vessel_color_flourosopy)
#>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
# Slope of excercise during ST depression testing  >>>
# 1 = up; 2 = flat; 3 = down                       >>>
#>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
slope_st <- ifelse(Dataset$slope=='up',1,
ifelse(Dataset$slope=='flat',2,3))
#>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
# Defect type                                          >>>
# 3 = normal; 6 = fixed defect; 7 = reversable defect  >>>
#>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
defect_type <- ifelse(Dataset$thal=='normal',3,
ifelse(Dataset$thal=='fixed_defect',6,7))
#>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
# Creating a new dataset with required attributes  >>>
#>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
New_Dataset <- cbind(age=norm(Dataset[,1],min(Dataset[,1]),max(Dataset[,1]))
,resting_bp=norm(Dataset[,4],min(Dataset[,4]),max(Dataset[,4]))
,cholestrol=norm(Dataset[,5],min(Dataset[,5]),max(Dataset[,5]))
,fasting_blood_sugar=fbs_num
,max_heartrate=norm(Dataset[,8],min(Dataset[,8]),max(Dataset[,8]))
,exercise_induced_ang=exia_num
,ST_dep_rate=norm(Dataset[,10],min(Dataset[,10]),max(Dataset[,10]))
,ST_slope=norm(slope_st,min(slope_st),max(slope_st))
,defect=norm(defect_type,min(defect_type),max(defect_type))
,flourosopy_result=Dataset$vessel_color_flourosopy
,ecg_result=as.character(Dataset$rest_ecg)
,male_female=as.character(Dataset$gender)
,chest_pain_type=as.character(Dataset$chestpaintype)
,heart_result=as.character(Dataset$diam_narrowing))
View(New_Dataset)
################################################################################
# Storing 70% of the new datsets as TRAINING DATA and the rest as TEST DATA  ###
################################################################################
temp <- sample(nrow(New_Dataset),as.integer(0.70 * nrow(New_Dataset)))
Training <- New_Dataset[temp,]
Test <- New_Dataset[-temp,]
##########################
# Error rate function  ###
##########################
error <- function(col) #col - column to compare with
{
e_result <- cbind(Test, as.character(Predict))
false <- e_result[,col]!=e_result[,15]
err_rate <- sum(false)/length(false)
err_rate
}
#####################
# Performing KNN  ###
#####################
library(class)
# Classifying based on gender
Predict_g <- knn(Training[,1:9], Test[,1:9], Training[,12], k=23)
#>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
#Error value for kNN when classifying with gender  >>>
#>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
e_result <- cbind(Test, as.character(Predict_g))
false <- e_result[,12]!=e_result[,15]
err_rate <- sum(false)/length(false)
err_rate
#>>>>>>>>>>>>>>>>>>>>>>
# Frequency tables  >>>
#>>>>>>>>>>>>>>>>>>>>>>
table(Predict_g, Test[,14]) # Frequency Table gender vs heart narrowing
table(Predict_g, Test[,13]) # Frequency Table gender vs chest pain type
table(Predict_g, Test[,11]) # Frequency Table gender vs ECG_result
# Classifying based on ECG results
Predict_cpt <- knn(Training[,1:9], Test[,1:9], Training[,13], k=17)
#>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
#Error value for kNN when classifying with chest pain type  >>>
#>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
e_result <- cbind(Test, as.character(Predict_cpt))
false <- e_result[,13]!=e_result[,15]
err_rate <- sum(false)/length(false)
err_rate
#>>>>>>>>>>>>>>>>>>>>>>
# Frequency tables  >>>
#>>>>>>>>>>>>>>>>>>>>>>
table(Predict_cpt, Test[,14]) # Frequency Table chest pain type vs heart narrowing
table(Predict_cpt, Test[,11]) # Frequency Table chest pain type vs ECG_result
########################
# Performing kMeans  ###
########################
#Applying K MEANS algorithm and classifyng data in clusters.
age <- Training[,1]
cholestrol <- Training[,3]
resting_bp <- Training[,2]
fasting_blood_sugar <- Training[,4]
max_heart_rate <- Training[,5]
gender <- Training[,12]
Predict_clus <- kmeans(Training[,1:10], 3) # Kmeans
Predict_clus
table(Training[,12],Predict_clus$cluster) # Frequency Table age cluster
table(Training[,14],Predict_clus$cluster) # Frequency Table heart_narrowing cluster
table(Training[,13],Predict_clus$cluster) # Frequency Table chest_pain_type cluster
table(Training[,11],Predict_clus$cluster) # Frequency Table ECG_result cluster
# Plotting on max_heart_rate vs age
plot(max_heart_rate, age, col = Predict_clus$cluster)
points(Predict_clus$centers,col = 1:3, pch = 17, cex = 2)
# Plotting on resting_bp vs age
plot(resting_bp, age, col = Predict_clus$cluster)
points(Predict_clus$centers,col = 1:3, pch = 17, cex = 2)
# Plotting on age vs cholestrol
plot(age, cholestrol,type='p', col = Predict_clus$cluster)
points(Predict_clus$centers,col = 1:3, pch = 17, cex = 2)
shiny::runApp('D:/Project/R/CS513/Shiny/basic-1')
shiny::runApp('D:/Project/R/CS513/Shiny/basic-1')
install.packages("devtools")
devtools::install_github('rstudio/shinyapps')
runApp('C513-ShinyApps')
library("shinyapps", lib.loc="~/R/win-library/3.1")
library("shiny", lib.loc="~/R/win-library/3.1")
detach("package:shiny", unload=TRUE)
detach("package:shinyapps", unload=TRUE)
library("shiny", lib.loc="~/R/win-library/3.1")
runApp('C513-ShinyApps')
setwd('D:\Project\R\CS513\CS513-Final-Project')
setwd('D:\\Project\\R\\CS513\\CS513-Final-Project')
runApp('C513-ShinyApps')
runApp('D:\\Project\\R\\CS513\\CS513-Final-Project\\C513-ShinyApps')
runApp('D:\\Project\\R\\CS513\\CS513-Final-Project\\C513-ShinyApps')
shiny::runApp()
shiny::runApp()
## ----------------------------single linkage
dd
rm(list=ls())
#Problem 1
d1<-c(7,10,13,21,28,28,35,43,44,50)
d2<-c(57,62,63,71,78,88,89,90,94,98)
#conbine and convert to matrix
md<-as.matrix(cbind(d1,d2))
# find distance matrix
d<-dist(md)
# apply hirarchical clustering using "average" linkage method
hc <- hclust(d,method="average")
#plot the dendrogram
plot(hc)
# If we want to cluster the dataset into two groups, we can cut tree into 2 clusters
groups <- cutree(hc, k=2)
# draw dendogram with red borders around the 2 clusters
rect.hclust(hc, k=2, border="red")
#Problem 2
# read csv file into R
dsn <- read.csv("http://www.math.smith.edu/sasr/datasets/help.csv")
#Convert categorical values to binary values
substance_cocaine<-ifelse(dsn$substance=='cocaine',1,0)
substance_alcohol<-ifelse(dsn$substance=='alcohol',1,0)
# Normalization function:
mmnorm <-function(x,minx,maxx) {z<-((x-minx)/(maxx-minx))
return(z)
}
summary(dsn$age)
#combine type of addiction(substance), Age and Gender
dsn2<- cbind(
age=mmnorm(dsn$age,min(dsn$age),max(dsn$age)),
gender=dsn$female,
substance_cocaine,
substance_cocaine
)
md<-as.matrix(dsn2)
#apply k means and let it randomly choose the initial centers 25 times
c1<-kmeans(md,3,nstart=25)
#show the clustering results
c1
#I plot the clusters in the graph of gender and age, to show the results clearly.
plot(dsn2[,1:2],col=c1$cluster)
points(c1$center,col=1:3,pch=2,cex=2)
